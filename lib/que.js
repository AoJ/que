// Generated by CoffeeScript 1.3.3
var Que, async, clone, url;

url = require('url');

async = require('async');

clone = function(src) {
  var dest, property;
  dest = function() {};
  for (property in src) {
    if (src.hasOwnProperty(property)) {
      dest[property] = src[property];
    }
  }
  src.prototype = dest.prototype;
  return src;
};

Que = (function() {

  function Que() {}

  Que.drivers = {};

  Que.registerDriver = function(name, driver) {
    return this.drivers[name] = driver;
  };

  Que.connect = function(servers, callback) {
    var _this = this;
    if (servers == null) {
      servers = [];
    }
    return async.forEach(servers, function(server, nextServer) {
      var driver;
      driver = _this.drivers[url.parse(server).protocol.replace(':', '')];
      return driver.connect(server, function() {
        return nextServer();
      });
    }, function() {
      if (callback) {
        return callback();
      }
    });
  };

  Que.disconnect = function(callback) {
    return async.forEach(this.drivers, function(driver, nextDriver) {
      return driver.disconnect(function() {
        return nextDriver();
      });
    }, function() {
      if (callback) {
        return callback();
      }
    });
  };

  Que.workers = {};

  Que.define = function(params) {
    var param, worker;
    worker = clone(Que.Model);
    for (param in params) {
      if (params.hasOwnProperty(param)) {
        worker.prototype[param] = params[param];
      }
    }
    return this.setup(worker);
  };

  Que.setup = function(worker) {
    worker.job = worker.prototype.job;
    worker.driver = Que.drivers[worker.prototype.driver];
    worker.driver.register(worker.prototype.job, function(params, job) {
      var processor;
      processor = new worker;
      processor.params = JSON.parse(params);
      return processor.process.call(processor, function(err, response) {
        processor.response = response;
        if (processor.finished) {
          processor.finished.call(processor(err));
        }
        return job.end(JSON.stringify(response));
      });
    });
    this.workers[worker.prototype.job] = worker;
    return worker;
  };

  return Que;

})();

Que.registerDriver('gearman', require('./drivers/gearman'));

Que.Model = (function() {

  function Model() {}

  Model.submit = function(params, callback) {
    var data, worker;
    worker = this.driver.submit(this.job, JSON.stringify(params));
    data = void 0;
    worker.on('data', function(response) {
      return data = JSON.parse(response.toString());
    });
    return worker.on('end', function() {
      if (callback) {
        return callback(false, data);
      }
    });
  };

  return Model;

})();

module.exports = Que;
